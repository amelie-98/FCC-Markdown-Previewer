{"version":3,"sources":["components/Editor.js","components/Preview.js","App.js","serviceWorker.js","index.js"],"names":["Editor","this","props","InputEditor","onChange","className","FormGroup","Input","type","name","id","value","Component","Preview","OutputPreview","dangerouslySetInnerHTML","__html","marked","App","state","placeholder","EditoronChange","bind","event","setState","target","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+XAwBeA,E,iLAlBJ,IAAD,EAC2BC,KAAKC,MAA9BC,EADF,EACEA,YAAYC,EADd,EACcA,SACtB,OACE,yBAAKC,UAAU,UACX,kBAACC,EAAA,EAAD,CAAWD,UAAY,WACrB,yBAAKA,UAAY,UAAjB,UACA,kBAACE,EAAA,EAAD,CACAF,UAAY,SACZG,KAAK,WAAWC,KAAK,OAAOC,GAAG,cAC/BN,SAAYA,EACZO,MAASR,U,GAZES,a,yBCiBNC,E,iLAbJ,IACCC,EAAkBb,KAAKC,MAAvBY,cACV,OACE,yBAAKT,UAAU,WACX,kBAACC,EAAA,EAAD,CAAWD,UAAY,YACrB,yBAAKA,UAAY,UAAjB,WACA,yBAAKA,UAAW,SAASU,wBAA2B,CAACC,OAAQC,IAAOH,Y,GARxDF,aC8BPM,E,YA5Bb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXnB,OAASoB,GAEX,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBALX,E,4EAQEC,GACbtB,KAAKuB,SAAS,CACZxB,OAASuB,EAAME,OAAOd,U,+BAKxB,IAAMR,EAAcF,KAAKkB,MAAMnB,OACzBc,EAAgBb,KAAKkB,MAAMnB,OAEnC,OADE0B,QAAQC,IAAIV,IAAOH,IAEnB,yBAAKT,UAAU,OACb,kBAAC,EAAD,CAAQF,YAAgBA,EAAcC,SAAYH,KAAKoB,iBACvD,kBAAC,EAAD,CAASP,cAAkBA,EAAgBC,yBAAuB,S,GAtBtDH,aAgCZQ,EAAW,8qCC3BGQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b31f8a88.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Editor.css';\r\nimport { FormGroup , Input } from 'reactstrap';\r\n\r\nclass Editor extends Component {\r\n\r\n  render(){\r\n    const { InputEditor,onChange } = this.props;\r\n  return (\r\n    <div className=\"Editor\">\r\n        <FormGroup className = 'Editor1'>\r\n          <div className = 'Label1' >Editor</div>\r\n          <Input \r\n          className = 'Input1' \r\n          type=\"textarea\" name=\"text\" id=\"exampleText\" \r\n          onChange = {onChange}\r\n          value = {InputEditor}\r\n          />\r\n        </FormGroup>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default Editor;\r\n","import React, { Component } from 'react';\r\nimport './Preview.css';\r\nimport { FormGroup , Input } from 'reactstrap';\r\n\r\nimport marked from 'marked';\r\n\r\nclass Preview extends Component {\r\n\r\n  render(){\r\n    const { OutputPreview } = this.props;\r\n  return (\r\n    <div className=\"Preview\">\r\n        <FormGroup className = 'Preview2'>\r\n          <div className = 'Label2' >Preview</div>\r\n          <div className ='Input2' dangerouslySetInnerHTML = {{__html: marked(OutputPreview)}} /> \r\n        </FormGroup>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default Preview;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Editor from './components/Editor';\nimport Preview from './components/Preview';\n\nimport marked from 'marked';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      Editor : placeholder,\n    }\n    this.EditoronChange = this.EditoronChange.bind(this)\n  }\n  \n  EditoronChange(event){\n    this.setState({\n      Editor : event.target.value\n    })\n  }\n\n  render(){\n    const InputEditor = this.state.Editor;\n    const OutputPreview = this.state.Editor;\n    console.log(marked(OutputPreview))\n  return (\n    <div className=\"App\">\n      <Editor InputEditor = { InputEditor } onChange = {this.EditoronChange}/>\n      <Preview OutputPreview = { OutputPreview } dangerouslySetInnerHTML/>\n      {/* <MarkdownExample /> */}\n    </div>\n  );\n}\n}\n\nexport default App;\n\n\nconst placeholder = \n`# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}